/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#include "logserver.h"
#include <google/protobuf/text_format.h>
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace machinetalk { namespace application {

/** Generic Log Server implementation */
LogServer::LogServer(QObject *parent)
    : QObject(parent)
    , QQmlParserStatus()
    , m_componentCompleted(false)
    , m_ready(false)
    , m_debugName("Log Server")
    , m_logChannel(nullptr)
    , m_state(State::Down)
    , m_previousState(State::Down)
    , m_errorString("")
{
    // initialize log channel
    m_logChannel = new common::Publish(this);
    m_logChannel->setDebugName(m_debugName + " - log");
    connect(m_logChannel, &common::Publish::socketUriChanged,
            this, &LogServer::logUriChanged);

    connect(m_logChannel, &common::Publish::heartbeatIntervalChanged,
            this, &LogServer::logHeartbeatIntervalChanged);
    // state machine
    connect(this, &LogServer::fsmDownConnect,
            this, &LogServer::fsmDownConnectEvent);
    connect(this, &LogServer::fsmUpDisconnect,
            this, &LogServer::fsmUpDisconnectEvent);
}

LogServer::~LogServer()
{
}

/** Add a topic that should be subscribed **/
void LogServer::addLogTopic(const QByteArray &name)
{
    m_logChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void LogServer::removeLogTopic(const QByteArray &name)
{
    m_logChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void LogServer::clearLogTopics()
{
    m_logChannel->clearSocketTopics();
}

void LogServer::startLogChannel()
{
    m_logChannel->setReady(true);
}

void LogServer::stopLogChannel()
{
    m_logChannel->setReady(false);
}

void LogServer::sendLogMessage(const QByteArray &topic, ContainerType type, Container &tx)
{
    m_logChannel->sendSocketMessage(topic, type, tx);
}

void LogServer::sendLogMessage(const QByteArray &topic, Container &tx)
{
    sendLogMessage(topic, MT_LOG_MESSAGE, tx);
}

void LogServer::fsmDown()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
    m_state = State::Down;
    emit stateChanged(m_state);
}

void LogServer::fsmDownConnectEvent()
{
    if (m_state == State::Down)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif
        // handle state change
        emit fsmDownExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        startLogChannel();
     }
}

void LogServer::fsmUp()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
    m_state = State::Up;
    emit stateChanged(m_state);
}

void LogServer::fsmUpDisconnectEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopLogChannel();
     }
}

/** start trigger function */
void LogServer::start()
{
    if (m_state == State::Down) {
        emit fsmDownConnect(QPrivateSignal());
    }
}

/** stop trigger function */
void LogServer::stop()
{
    if (m_state == State::Up) {
        emit fsmUpDisconnect(QPrivateSignal());
    }
}

} } // namespace machinetalk::application

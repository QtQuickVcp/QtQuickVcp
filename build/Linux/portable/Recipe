#!/usr/bin/env bash

# Build a portable AppImage starting from a clean system. Other examples at:
# https://github.com/probonopd/AppImages/blob/master/recipes/scribus/Recipe

# NOTES:
#
# 1) IT IS NOT SAFE TO RUN THIS RECIPE ON A PERSISTENT FILESYSTEM! Use either:
#      * A chroot into a Live ISO, squashfs or Docker Image.
#      * Or, a virtual machine on a dedicated build server (e.g. Travis CI)
#    DO NOT RUN THE RECIPE ON A NORMAL COMPUTER OUTSIDE OF A TEMPORARY CHROOT!
#

set -e # Halt on errors
set -x # Be verbose

##########################################################################
# CHECK SYSTEM
##########################################################################

# This script should be run inside CentOS 6 if possible,
# or CentOS 7 if 6 is unavailable for your architecture.
if [ "$(grep "Debian GNU/Linux 8 (jessie)" /etc/*release*)" ]; then
  OS="Debian Jessie"
else
  echo "${0}: Error: Not running on Debian Jessie!" >&2
  exit 1
fi

##########################################################################
# GET DEPENDENCIES
##########################################################################

# add Machinekit repository
apt-key adv --keyserver keyserver.ubuntu.com --recv 43DDF224
sh -c \
   "echo 'deb http://deb.machinekit.io/debian jessie main' > \
    /etc/apt/sources.list.d/machinekit.list"
apt update
# basic dependencies (needed by Docker image)
apt install -y git wget automake unzip gcc g++ binutils bzip2
# QtQuickVcp's dependencies:
apt-get install -y pkg-config libprotobuf-dev protobuf-compiler libzmq3-dev
apt-get install -y build-essential gdb dh-autoreconf libgl1-mesa-dev libxslt1.1 git
# dependencies of qmlplugindump
apt-get install -y libfontconfig1 libxrender1 libdbus-1-3 libegl1-mesa

# Go one-up from QtQuickVcp root dir regardless of where script was run from:
cd "$(dirname "$(readlink -f "${0}")")/../../../.."

# Build AppImageKit now to avoid conflicts with MuseScore's dependencies (LAME)
[ -d "AppImageKit" ] || git clone --depth 1 https://github.com/probonopd/AppImageKit.git
cd AppImageKit
./build.sh

 cd ..

 [ -d "Qt-Deployment-Scripts" ] || git clone --depth 1 https://github.com/machinekoder/Qt-Deployment-Scripts.git
 cd Qt-Deployment-Scripts
 make install
 cd ..

# Qt dependencies
#Qt // TODO this is Qt x86_64, fix me for i686 and arm...
#yum -y install qt5-qtbase-devel qt5-qttools-libs-designercomponents qt5-qttools-devel qt5-qtdeclarative-devel qt5-qtscript-devel qt5-qtwebkit-devel qt5-qtxmlpatterns-devel qt5-qtquick1-devel qt5-qtsvg-devel qt5-qttools-devel qt5-qttools-static qt5-qtmultimedia-devel qt5-qtwebchannel-devel qt5-qtimageformats qt5-qtquickcontrols

mkdir -p qt5 && wget -q -O qt5.tar.bz2 http://buildbot.roessler.systems/files/qt-bin/Qt-5.7-Linux-x64.tar.bz2
tar xjf qt5.tar.bz2 -C qt5
export PATH="${PWD}/qt5/bin:$PATH"
export LD_LIBRARY_PATH="${PWD}/qt5/lib:$LD_LIBRARY_PATH"
export QT_PLUGIN_PATH="${PWD}/qt5/plugins"
export QML_IMPORT_PATH="${PWD}/qt5/qml"
export QML2_IMPORT_PATH="${PWD}/qt5/qml"
export QT_QPA_PLATFORM_PLUGIN_PATH="${PWD}/qt5/plugins/platforms"
export QT_INSTALL_PREFIX="${PWD}/qt5"

##########################################################################
# BUILD QTQUICKVCP
##########################################################################

# If not building on Travis then might need to fetch QtQuickVcp
[ -d "QtQuickVcp" ] || git clone --depth 1 https://github.com/machinekoder/QtQuickVcp.git

cd QtQuickVcp

mkdir -p build.release
cd build.release

qmake ..
make
# make docs
make install
# make install_docs

# compress QtQuick module
zipfile="QtQuickVcp.tar.gz"
cp -r imports qml
tar -zcf $zipfile qml
# allow access to archive from outside the chroot
chmod a+rwx $zipfile
chmod a+rwx .
ls -lh $zipfile
rm -r qml

# create binary zip file
qt-deploy ../build/deployment-scripts/linux_x64.ini --deploy

# prepare AppDir
cd MachinekitClient.AppDir
cp /usr/share/pixmaps/machinekit.png .
cp /usr/share/applications/machinekit-client.desktop .
mv machinekit-client AppRun
cd ..

# prepare variables
appdir=${PWD}/MachinekitClient.AppDir/
appimage=${PWD}/MachinekitClient.AppImage

# back to home folder
cd ../../

##########################################################################
# PACKAGE INTO APPIMAGE WITH APPIMAGEKIT
##########################################################################

cd AppImageKit/AppImageAssistant.AppDir
./package  "$appdir" "$appimage"

# allow access to AppImage from outside the chroot
chmod a+rwx "$appimage"
parent_dir="$(dirname "$appimage")"
while [ "$(dirname "$parent_dir")" != "$parent_dir" ]; do
  [ "$parent_dir" == "/" ] && break
  chmod a+rwx "$parent_dir"
  parent_dir="$(dirname "$parent_dir")"
done

ls -lh "$appimage"
